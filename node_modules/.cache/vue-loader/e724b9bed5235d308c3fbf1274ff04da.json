{"remainingRequest":"/home/andre/dev/tanandre.github.io/stringtools/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/andre/dev/tanandre.github.io/stringtools/src/components/Tools.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/andre/dev/tanandre.github.io/stringtools/src/components/Tools.vue","mtime":1538186354592},{"path":"/home/andre/dev/tanandre.github.io/stringtools/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/andre/dev/tanandre.github.io/stringtools/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/andre/dev/tanandre.github.io/stringtools/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/andre/dev/tanandre.github.io/stringtools/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from 'vuex';\nimport store from '../store';\n\nfunction debounce(ms) {\n\tlet timer = 0;\n\treturn (callback) => {\n\t\tclearTimeout(timer);\n\t\ttimer = setTimeout(callback, ms);\n\t}\n}\n\nfunction isEdge() {\n\treturn /Edge\\/\\d./i.test(navigator.userAgent);\n}\n\nlet copyDebouncer = debounce(400);\n\nimport formatUtil from '../js/FormatUtil'\nimport ActionList from './ActionList.vue'\nimport ErrorToaster from './ErrorToaster.vue'\nimport Settings from './Settings.vue'\nimport Editor from './Editor.vue'\nimport UserAuthPane from './UserAuthPane.vue'\n\nexport default {\n\tcomponents: {\n\t\tErrorToaster,\n\t\tSettings,\n\t\tActionList,\n\t\tUserAuthPane,\n\t\tEditor\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshowCopy: false,\n\t\t\tdrawer: true,\n\t\t\tshowTextarea: true,\n\t\t\tisEdge: isEdge(),\n\t\t\tactions: [\n\t\t\t\t{ label: 'encode URL', icon: 'cloud', shortKey: 'ctrl-[', action: encodeURIComponent },\n\t\t\t\t{ label: 'decode URL', icon: 'cloud_queue', shortKey: 'ctrl-shift-[', action: decodeURIComponent },\n\t\t\t\t{ label: 'encode Base64', icon: 'hdr_strong', shortKey: 'ctrl-]', action: btoa },\n\t\t\t\t{ label: 'decode Base64', icon: 'hdr_weak', shortKey: 'ctrl-shift-]', action: atob },\n\t\t\t\t{\n\t\t\t\t\tlabel: 'format JSON',\n\t\t\t\t\ticon: 'format_line_spacing',\n\t\t\t\t\tshortKey: 'ctrl-shift-f',\n\t\t\t\t\taction: formatUtil.formatJson\n\t\t\t\t},\n\t\t\t\t{ label: 'format XML', icon: 'code', shortKey: 'ctrl-shift-f', action: formatUtil.formatXml }\n\t\t\t]\n\t\t}\n\t},\n\tcomputed: {\n\t\t...mapState({\n\t\t\tuser: state => state.session.user,\n\t\t\tautoCopy: state => state.settings.autoCopy\n\t\t}),\n\t},\n\tmounted() {\n\t\twindow.addEventListener('keydown', this.onKeyDown)\n\t},\n\tmethods: {\n\t\tonKeyDown(key) {\n\t\t\tconst ta = this.getTextArea();\n\t\t\tif (!ta.value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// console.log(key, key.keyCode);\n\t\t\tif (key.ctrlKey && key.shiftKey && key.keyCode === 70) {\n\t\t\t\tlet errors = [];\n\t\t\t\ttry {\n\t\t\t\t\tta.value = formatUtil.formatJson(ta.value);\n\t\t\t\t} catch (e) {\n\t\t\t\t\terrors.push(e);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tta.value = formatUtil.formatXml(ta.value);\n\t\t\t\t} catch (e) {\n\t\t\t\t\terrors.push(e);\n\t\t\t\t}\n\n\t\t\t\tif (errors.length === 2) {\n\t\t\t\t\tthis.handleError(new Error('text not formatted: could not parse as JSON or XML'));\n\t\t\t\t}\n\t\t\t\tthis.copyToClipboard();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key.ctrlKey && !key.shiftKey && key.keyCode === 219) {\n\t\t\t\treturn this.safeExecute(encodeURIComponent);\n\t\t\t} else if (key.ctrlKey && key.shiftKey && key.keyCode === 219) {\n\t\t\t\treturn this.safeExecute(decodeURIComponent);\n\t\t\t} else if (key.ctrlKey && !key.shiftKey && key.keyCode === 221) {\n\t\t\t\treturn this.safeExecute(btoa);\n\t\t\t} else if (key.ctrlKey && key.shiftKey && key.keyCode === 221) {\n\t\t\t\treturn this.safeExecute(atob);\n\t\t\t}\n\t\t},\n\n\t\tgetTextArea() {\n\t\t\treturn this.$refs['textareaContainer'].$el ? this.$refs['textareaContainer'].$el : this.$refs['textareaContainer'];\n\t\t},\n\n\t\tcopyToClipboard() {\n\t\t\tconst ta = this.getTextArea();\n\t\t\t// attempt to add to undo buffer\n\t\t\tta.blur();\n\t\t\tta.focus();\n\n\t\t\tta.select();\n\t\t\tdocument.execCommand('copy');\n\t\t\tcopyDebouncer(() => {\n\t\t\t\tta.blur();\n\t\t\t\tta.focus();\n\t\t\t\tthis.showCopy = true;\n\t\t\t});\n\t\t},\n\n\t\thandleError(e) {\n\t\t\tconsole.error(e);\n\t\t\tthis.$store.commit('error', e);\n\t\t},\n\n\t\tsafeExecute(fnc) {\n\t\t\tthis.error = null;\n\t\t\ttry {\n\t\t\t\tconst ta = this.getTextArea();\n\t\t\t\tif (!ta.value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// attempt to add to undo buffer\n\t\t\t\tta.blur();\n\t\t\t\tta.focus();\n\n\t\t\t\tlet value = fnc(ta.value);\n\t\t\t\tta.value = value;\n\t\t\t\tif (this.autoCopy) {\n\t\t\t\t\tthis.copyToClipboard();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.handleError(e);\n\t\t\t}\n\t\t}\n\t}\n}\n",{"version":3,"sources":["Tools.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Tools.vue","sourceRoot":"src/components","sourcesContent":["<template>\n   <v-app dark>\n      <v-navigation-drawer clipped fixed v-model=\"drawer\" app>\n         <ActionList :actions=\"actions\" v-on:action=\"safeExecute\"></ActionList>\n         <Settings></Settings>\n      </v-navigation-drawer>\n      <v-toolbar app fixed clipped-left dense class=\"toolbar\">\n         <v-toolbar-side-icon @click.stop=\"drawer = !drawer\"></v-toolbar-side-icon>\n         <v-toolbar-title>String Tools</v-toolbar-title>\n         <v-spacer></v-spacer>\n         <UserAuthPane></UserAuthPane>\n         <v-toolbar-items>\n         </v-toolbar-items>\n      </v-toolbar>\n      <v-content>\n         <Editor ref=\"textareaContainer\"></Editor>\n         <ErrorToaster></ErrorToaster>\n         <v-snackbar v-model=\"showCopy\" top>\n            <span><v-icon class=\"snackbarIcon\">content_copy</v-icon><small>Text copied...</small></span>\n         </v-snackbar>\n      </v-content>\n   </v-app>\n</template>\n\n<script>\n\timport { mapState } from 'vuex';\n\timport store from '../store';\n\n\tfunction debounce(ms) {\n\t\tlet timer = 0;\n\t\treturn (callback) => {\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = setTimeout(callback, ms);\n\t\t}\n\t}\n\n\tfunction isEdge() {\n\t\treturn /Edge\\/\\d./i.test(navigator.userAgent);\n\t}\n\n\tlet copyDebouncer = debounce(400);\n\n\timport formatUtil from '../js/FormatUtil'\n\timport ActionList from './ActionList.vue'\n\timport ErrorToaster from './ErrorToaster.vue'\n\timport Settings from './Settings.vue'\n\timport Editor from './Editor.vue'\n\timport UserAuthPane from './UserAuthPane.vue'\n\n\texport default {\n\t\tcomponents: {\n\t\t\tErrorToaster,\n\t\t\tSettings,\n\t\t\tActionList,\n\t\t\tUserAuthPane,\n\t\t\tEditor\n\t\t},\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tshowCopy: false,\n\t\t\t\tdrawer: true,\n\t\t\t\tshowTextarea: true,\n\t\t\t\tisEdge: isEdge(),\n\t\t\t\tactions: [\n\t\t\t\t\t{ label: 'encode URL', icon: 'cloud', shortKey: 'ctrl-[', action: encodeURIComponent },\n\t\t\t\t\t{ label: 'decode URL', icon: 'cloud_queue', shortKey: 'ctrl-shift-[', action: decodeURIComponent },\n\t\t\t\t\t{ label: 'encode Base64', icon: 'hdr_strong', shortKey: 'ctrl-]', action: btoa },\n\t\t\t\t\t{ label: 'decode Base64', icon: 'hdr_weak', shortKey: 'ctrl-shift-]', action: atob },\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'format JSON',\n\t\t\t\t\t\ticon: 'format_line_spacing',\n\t\t\t\t\t\tshortKey: 'ctrl-shift-f',\n\t\t\t\t\t\taction: formatUtil.formatJson\n\t\t\t\t\t},\n\t\t\t\t\t{ label: 'format XML', icon: 'code', shortKey: 'ctrl-shift-f', action: formatUtil.formatXml }\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tcomputed: {\n\t\t\t...mapState({\n\t\t\t\tuser: state => state.session.user,\n\t\t\t\tautoCopy: state => state.settings.autoCopy\n\t\t\t}),\n\t\t},\n\t\tmounted() {\n\t\t\twindow.addEventListener('keydown', this.onKeyDown)\n\t\t},\n\t\tmethods: {\n\t\t\tonKeyDown(key) {\n\t\t\t\tconst ta = this.getTextArea();\n\t\t\t\tif (!ta.value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// console.log(key, key.keyCode);\n\t\t\t\tif (key.ctrlKey && key.shiftKey && key.keyCode === 70) {\n\t\t\t\t\tlet errors = [];\n\t\t\t\t\ttry {\n\t\t\t\t\t\tta.value = formatUtil.formatJson(ta.value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e);\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tta.value = formatUtil.formatXml(ta.value);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\terrors.push(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (errors.length === 2) {\n\t\t\t\t\t\tthis.handleError(new Error('text not formatted: could not parse as JSON or XML'));\n\t\t\t\t\t}\n\t\t\t\t\tthis.copyToClipboard();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (key.ctrlKey && !key.shiftKey && key.keyCode === 219) {\n\t\t\t\t\treturn this.safeExecute(encodeURIComponent);\n\t\t\t\t} else if (key.ctrlKey && key.shiftKey && key.keyCode === 219) {\n\t\t\t\t\treturn this.safeExecute(decodeURIComponent);\n\t\t\t\t} else if (key.ctrlKey && !key.shiftKey && key.keyCode === 221) {\n\t\t\t\t\treturn this.safeExecute(btoa);\n\t\t\t\t} else if (key.ctrlKey && key.shiftKey && key.keyCode === 221) {\n\t\t\t\t\treturn this.safeExecute(atob);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tgetTextArea() {\n\t\t\t\treturn this.$refs['textareaContainer'].$el ? this.$refs['textareaContainer'].$el : this.$refs['textareaContainer'];\n\t\t\t},\n\n\t\t\tcopyToClipboard() {\n\t\t\t\tconst ta = this.getTextArea();\n\t\t\t\t// attempt to add to undo buffer\n\t\t\t\tta.blur();\n\t\t\t\tta.focus();\n\n\t\t\t\tta.select();\n\t\t\t\tdocument.execCommand('copy');\n\t\t\t\tcopyDebouncer(() => {\n\t\t\t\t\tta.blur();\n\t\t\t\t\tta.focus();\n\t\t\t\t\tthis.showCopy = true;\n\t\t\t\t});\n\t\t\t},\n\n\t\t\thandleError(e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tthis.$store.commit('error', e);\n\t\t\t},\n\n\t\t\tsafeExecute(fnc) {\n\t\t\t\tthis.error = null;\n\t\t\t\ttry {\n\t\t\t\t\tconst ta = this.getTextArea();\n\t\t\t\t\tif (!ta.value) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// attempt to add to undo buffer\n\t\t\t\t\tta.blur();\n\t\t\t\t\tta.focus();\n\n\t\t\t\t\tlet value = fnc(ta.value);\n\t\t\t\t\tta.value = value;\n\t\t\t\t\tif (this.autoCopy) {\n\t\t\t\t\t\tthis.copyToClipboard();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.handleError(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style scoped>\n   .start .navigation-drawer {\n      padding: 0;\n   }\n</style>\n"]}]}